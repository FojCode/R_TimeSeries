# Sample autocovariance function 

# Sample time series data (replace with your actual data)
data <- rnorm(100)  # Generate 100 random normal values

# Calculate ACVF with 20 lags (adjust max.lag as needed)
acvf <- acf(data, lh = 0, uh = 20, type = "covariance")

# Plot the ACVF
plot(acvf, main = "Sample Autocovariance Function", xlab = "Lag", ylab = "Autocovariance")

# Add reference lines (optional)
abline(h = 0, col = "gray")  # Add horizontal line at 0

# Customize the plot further with additional arguments to plot()

# inversion formula of a time series 
# Sample differenced time series (replace with your actual data)
differenced_data <- diff(data)  # Assuming data is your original series

# Invert differencing (assuming initial value of 0)
inverted_data <- diffinv(differenced_data)

# You might need to adjust for the initial value (lost in differencing)
inverted_data <- inverted_data + data[1]  # Assuming data[1] is the initial value


# Convolution linear filters 
# Sample time series data (replace with your actual data)
data <- rnorm(100)

# Define filter coefficients (adjust as needed)
filter_coeffs <- c(0.2, 0.5, 0.3)  # Example filter with weights

# Apply convolution filter
filtered_data <- filter(data, filter_coeffs)

# Plot original and filtered data
plot(data, type = "l", col = "blue", main = "Original vs. Filtered Time Series")
lines(filtered_data, type = "l", col = "red")
legend("topright", c("Original", "Filtered"), col = c("blue", "red"), lty = 1)


# Linear filters of a time series 
# Install the required package (if not already installed)
if (!require("signal")) install.packages("signal")
library(signal)

# Sample time series data (replace with your actual data)
data <- rnorm(100)

# Define filter coefficients (adjust as needed)
filter_coeffs <- c(0.2, 0.5, 0.3)  # Example filter with weights

# Apply filter function
filtered_data <- filt(data, filter = filter_coeffs)

# Plot original and filtered data (similar to previous example)

# Acf/pacf test of a time series 
# Sample time series data (replace with your actual data)
data <- rnorm(100)

# Fit an ARMA(p,q) model (replace with your estimated model)
arma_model <- arima(data, order = c(1, 1))  # Example ARMA(1,1)

# Extract the residuals from the fitted model
residuals <- residuals(arma_model)

# Calculate ACF and PACF of the residuals
acf_result <- acf(residuals, lh = 0, uh = 20)
pacf_result <- pacf(residuals, lh = 0, uh = 20)

# Plot ACF and PACF
plot(acf_result, main = "ACF of ARMA Model Residuals", xlab = "Lag", ylab = "Autocorrelation")
plot(pacf_result, main = "PACF of ARMA Model Residuals", xlab = "Lag", ylab = "Partial Autocorrelation")

# Add reference lines (optional)
abline(h = 0, col = "gray")  # Add horizontal line at 0
abline(h = +/- 2 / sqrt(length(residuals)), col = "red", linetype = "dashed") # Add confidence interval lines


# breusch godfrey lm test of a time series 
# Install the required package (if not already installed)
if (!require("lmtest")) install.packages("lmtest")
library(lmtest)

# Sample time series data (replace with your actual data)
data <- rnorm(100)

# Fit an ARIMA(p,q) model (replace with your estimated model)
arma_model <- arima(data, order = c(1, 1))  # Example ARMA(1,1)

# Extract the residuals from the fitted model
residuals <- residuals(arma_model)

# Perform Breusch-Godfrey LM test
lmtest_result <- lmTest(lm(residuals ~ arma_model$fitted.values + arma_model$fitted.values^2), statistic = "LM")

# Print the test results
summary(lmtest_result)


# Turning point test of a time series 

# Install the required package (if not already installed)
if (!require("randtests")) install.packages("randtests")
library(randtests)

# Sample time series data (replace with your actual data)
data <- rnorm(100)

# Perform the Turning Point test
turning_point_result <- turning.point.test(data)

# Print the test results
summary(turning_point_result)


# Sample autocorrelation function of time series 

